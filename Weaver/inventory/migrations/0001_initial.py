# Generated by Django 4.0.4 on 2022-07-11 14:43

import datetime
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import shortuuidfield.fields
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Box',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=200)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=200)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='PlasmidAuthor',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='PlasmidType',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=10)),
            ],
        ),
        migrations.CreateModel(
            name='Primer',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=100)),
                ('sequence_3', models.CharField(blank=True, help_text="5' → 3' direction", max_length=200, verbose_name="Sequence (3' end)")),
                ('sequence_5', models.CharField(blank=True, help_text="5' → 3' direction", max_length=200, verbose_name="Sequence (5' end / overhang)")),
                ('fwd_or_rev', models.CharField(blank=True, choices=[('f', 'FWD'), ('r', 'REV')], max_length=1)),
                ('intended_use', models.CharField(blank=True, max_length=1000)),
                ('qr_id', shortuuidfield.fields.ShortUUIDField(blank=True, default='AynFdrpGQNU2ViNxBnzzi6', editable=False, max_length=22)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Resistance',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('three_letter_code', models.CharField(blank=True, max_length=3)),
                ('name', models.CharField(blank=True, max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='RestrictionEnzyme',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(choices=[('AanI', 'AanI'), ('AarI', 'AarI'), ('AasI', 'AasI'), ('AatII', 'AatII'), ('Aba6411II', 'Aba6411II'), ('AbaB8342IV', 'AbaB8342IV'), ('AbaCIII', 'AbaCIII'), ('AbaSI', 'AbaSI'), ('AbaUMB2I', 'AbaUMB2I'), ('Abr4036II', 'Abr4036II'), ('AbsI', 'AbsI'), ('Acc16I', 'Acc16I'), ('Acc36I', 'Acc36I'), ('Acc65I', 'Acc65I'), ('Acc65V', 'Acc65V'), ('AccB1I', 'AccB1I'), ('AccB7I', 'AccB7I'), ('AccBSI', 'AccBSI'), ('AccI', 'AccI'), ('AccII', 'AccII'), ('AccIII', 'AccIII'), ('AceIII', 'AceIII'), ('AchA6III', 'AchA6III'), ('AciI', 'AciI'), ('AclI', 'AclI'), ('AclWI', 'AclWI'), ('Aco12261II', 'Aco12261II'), ('AcoI', 'AcoI'), ('AcoY31II', 'AcoY31II'), ('AcsI', 'AcsI'), ('AcuI', 'AcuI'), ('AcvI', 'AcvI'), ('AcyI', 'AcyI'), ('AdeI', 'AdeI'), ('Adh6U21I', 'Adh6U21I'), ('AfaI', 'AfaI'), ('AfeI', 'AfeI'), ('AfiI', 'AfiI'), ('AflII', 'AflII'), ('AflIII', 'AflIII'), ('AgeI', 'AgeI'), ('AgsI', 'AgsI'), ('AhaIII', 'AhaIII'), ('AhdI', 'AhdI'), ('AhlI', 'AhlI'), ('AhyRBAHI', 'AhyRBAHI'), ('AhyYL17I', 'AhyYL17I'), ('AjiI', 'AjiI'), ('AjnI', 'AjnI'), ('AjuI', 'AjuI'), ('AleI', 'AleI'), ('AlfI', 'AlfI'), ('AloI', 'AloI'), ('AluBI', 'AluBI'), ('AluI', 'AluI'), ('Alw21I', 'Alw21I'), ('Alw26I', 'Alw26I'), ('Alw44I', 'Alw44I'), ('AlwFI', 'AlwFI'), ('AlwI', 'AlwI'), ('AlwNI', 'AlwNI'), ('Ama87I', 'Ama87I'), ('AmaCSI', 'AmaCSI'), ('Aod1I', 'Aod1I'), ('Aor13HI', 'Aor13HI'), ('Aor51HI', 'Aor51HI'), ('AoxI', 'AoxI'), ('ApaBI', 'ApaBI'), ('ApaI', 'ApaI'), ('ApaLI', 'ApaLI'), ('ApeKI', 'ApeKI'), ('ApoI', 'ApoI'), ('ApyPI', 'ApyPI'), ('AquII', 'AquII'), ('AquIII', 'AquIII'), ('AquIV', 'AquIV'), ('ArsI', 'ArsI'), ('AscI', 'AscI'), ('AseI', 'AseI'), ('Asi256I', 'Asi256I'), ('AsiGI', 'AsiGI'), ('AsiSI', 'AsiSI'), ('Asp103I', 'Asp103I'), ('Asp114pII', 'Asp114pII'), ('Asp337I', 'Asp337I'), ('Asp700I', 'Asp700I'), ('Asp718I', 'Asp718I'), ('AspA2I', 'AspA2I'), ('AspAMDIV', 'AspAMDIV'), ('AspBHI', 'AspBHI'), ('AspDUT2V', 'AspDUT2V'), ('AspJHL3II', 'AspJHL3II'), ('AspLEI', 'AspLEI'), ('AspNIH4III', 'AspNIH4III'), ('AspS9I', 'AspS9I'), ('AspSLV7III', 'AspSLV7III'), ('Asu14238IV', 'Asu14238IV'), ('AsuC2I', 'AsuC2I'), ('AsuHPI', 'AsuHPI'), ('AsuI', 'AsuI'), ('AsuII', 'AsuII'), ('AsuNHI', 'AsuNHI'), ('AteTI', 'AteTI'), ('AvaI', 'AvaI'), ('AvaII', 'AvaII'), ('AvaIII', 'AvaIII'), ('AvrII', 'AvrII'), ('Awo1030IV', 'Awo1030IV'), ('AxyI', 'AxyI'), ('BaeGI', 'BaeGI'), ('BaeI', 'BaeI'), ('Bag18758I', 'Bag18758I'), ('BalI', 'BalI'), ('BamHI', 'BamHI'), ('BanI', 'BanI'), ('BanII', 'BanII'), ('BanLI', 'BanLI'), ('BarI', 'BarI'), ('Bau1417V', 'Bau1417V'), ('BauI', 'BauI'), ('Bbr52II', 'Bbr52II'), ('Bbr57III', 'Bbr57III'), ('Bbr7017II', 'Bbr7017II'), ('Bbr7017III', 'Bbr7017III'), ('BbrPI', 'BbrPI'), ('BbsI', 'BbsI'), ('BbuB31I', 'BbuB31I'), ('BbuB31II', 'BbuB31II'), ('Bbv12I', 'Bbv12I'), ('BbvCI', 'BbvCI'), ('BbvI', 'BbvI'), ('BbvII', 'BbvII'), ('BccI', 'BccI'), ('Bce3081I', 'Bce3081I'), ('Bce83I', 'Bce83I'), ('BceAI', 'BceAI'), ('BceSIV', 'BceSIV'), ('BcefI', 'BcefI'), ('BcgI', 'BcgI'), ('BciT130I', 'BciT130I'), ('BciVI', 'BciVI'), ('BclI', 'BclI'), ('BcnI', 'BcnI'), ('BcoDI', 'BcoDI'), ('BcuI', 'BcuI'), ('BdaI', 'BdaI'), ('BetI', 'BetI'), ('BfaI', 'BfaI'), ('BfaSII', 'BfaSII'), ('BfiI', 'BfiI'), ('BfmI', 'BfmI'), ('BfoI', 'BfoI'), ('BfrI', 'BfrI'), ('BfuAI', 'BfuAI'), ('BfuI', 'BfuI'), ('Bga514I', 'Bga514I'), ('BglI', 'BglI'), ('BglII', 'BglII'), ('BinI', 'BinI'), ('BisI', 'BisI'), ('BkrAM31DI', 'BkrAM31DI'), ('Ble402II', 'Ble402II'), ('BlnI', 'BlnI'), ('BloAII', 'BloAII'), ('BlpI', 'BlpI'), ('BlsI', 'BlsI'), ('BmcAI', 'BmcAI'), ('Bme1390I', 'Bme1390I'), ('Bme18I', 'Bme18I'), ('BmeDI', 'BmeDI'), ('BmeRI', 'BmeRI'), ('BmeT110I', 'BmeT110I'), ('BmgBI', 'BmgBI'), ('BmgI', 'BmgI'), ('BmgT120I', 'BmgT120I'), ('BmiI', 'BmiI'), ('BmrFI', 'BmrFI'), ('BmrI', 'BmrI'), ('BmsI', 'BmsI'), ('BmtI', 'BmtI'), ('BmuI', 'BmuI'), ('BoxI', 'BoxI'), ('BpiI', 'BpiI'), ('BplI', 'BplI'), ('BpmI', 'BpmI'), ('Bpu10I', 'Bpu10I'), ('Bpu1102I', 'Bpu1102I'), ('Bpu14I', 'Bpu14I'), ('BpuEI', 'BpuEI'), ('BpuMI', 'BpuMI'), ('Bsa29I', 'Bsa29I'), ('BsaAI', 'BsaAI'), ('BsaBI', 'BsaBI'), ('BsaHI', 'BsaHI'), ('BsaI', 'BsaI'), ('BsaJI', 'BsaJI'), ('BsaWI', 'BsaWI'), ('BsaXI', 'BsaXI'), ('BsbI', 'BsbI'), ('Bsc4I', 'Bsc4I'), ('BscAI', 'BscAI'), ('BscGI', 'BscGI'), ('Bse118I', 'Bse118I'), ('Bse1I', 'Bse1I'), ('Bse21I', 'Bse21I'), ('Bse3DI', 'Bse3DI'), ('Bse8I', 'Bse8I'), ('BseAI', 'BseAI'), ('BseBI', 'BseBI'), ('BseCI', 'BseCI'), ('BseDI', 'BseDI'), ('BseGI', 'BseGI'), ('BseJI', 'BseJI'), ('BseLI', 'BseLI'), ('BseMI', 'BseMI'), ('BseMII', 'BseMII'), ('BseNI', 'BseNI'), ('BsePI', 'BsePI'), ('BseRI', 'BseRI'), ('BseSI', 'BseSI'), ('BseX3I', 'BseX3I'), ('BseXI', 'BseXI'), ('BseYI', 'BseYI'), ('BsgI', 'BsgI'), ('Bsh1236I', 'Bsh1236I'), ('Bsh1285I', 'Bsh1285I'), ('BshFI', 'BshFI'), ('BshNI', 'BshNI'), ('BshTI', 'BshTI'), ('BshVI', 'BshVI'), ('BsiEI', 'BsiEI'), ('BsiHKAI', 'BsiHKAI'), ('BsiHKCI', 'BsiHKCI'), ('BsiI', 'BsiI'), ('BsiSI', 'BsiSI'), ('BsiWI', 'BsiWI'), ('BsiYI', 'BsiYI'), ('BslFI', 'BslFI'), ('BslI', 'BslI'), ('BsmAI', 'BsmAI'), ('BsmBI', 'BsmBI'), ('BsmFI', 'BsmFI'), ('BsmI', 'BsmI'), ('BsnI', 'BsnI'), ('Bso31I', 'Bso31I'), ('BsoBI', 'BsoBI'), ('Bsp119I', 'Bsp119I'), ('Bsp120I', 'Bsp120I'), ('Bsp1286I', 'Bsp1286I'), ('Bsp13I', 'Bsp13I'), ('Bsp1407I', 'Bsp1407I'), ('Bsp143I', 'Bsp143I'), ('Bsp1720I', 'Bsp1720I'), ('Bsp19I', 'Bsp19I'), ('Bsp24I', 'Bsp24I'), ('Bsp3004IV', 'Bsp3004IV'), ('Bsp460III', 'Bsp460III'), ('Bsp68I', 'Bsp68I'), ('BspACI', 'BspACI'), ('BspANI', 'BspANI'), ('BspCNI', 'BspCNI'), ('BspD6I', 'BspD6I'), ('BspDI', 'BspDI'), ('BspEI', 'BspEI'), ('BspFNI', 'BspFNI'), ('BspGI', 'BspGI'), ('BspHI', 'BspHI'), ('BspLI', 'BspLI'), ('BspLU11I', 'BspLU11I'), ('BspMAI', 'BspMAI'), ('BspMI', 'BspMI'), ('BspMII', 'BspMII'), ('BspNCI', 'BspNCI'), ('BspOI', 'BspOI'), ('BspPI', 'BspPI'), ('BspQI', 'BspQI'), ('BspT104I', 'BspT104I'), ('BspT107I', 'BspT107I'), ('BspTI', 'BspTI'), ('BspTNI', 'BspTNI'), ('BsrBI', 'BsrBI'), ('BsrDI', 'BsrDI'), ('BsrFI', 'BsrFI'), ('BsrGI', 'BsrGI'), ('BsrI', 'BsrI'), ('BssAI', 'BssAI'), ('BssECI', 'BssECI'), ('BssHII', 'BssHII'), ('BssMI', 'BssMI'), ('BssNAI', 'BssNAI'), ('BssNI', 'BssNI'), ('BssSI', 'BssSI'), ('BssT1I', 'BssT1I'), ('Bst1107I', 'Bst1107I'), ('Bst2BI', 'Bst2BI'), ('Bst2UI', 'Bst2UI'), ('Bst4CI', 'Bst4CI'), ('Bst6I', 'Bst6I'), ('BstACI', 'BstACI'), ('BstAFI', 'BstAFI'), ('BstAPI', 'BstAPI'), ('BstAUI', 'BstAUI'), ('BstBAI', 'BstBAI'), ('BstBI', 'BstBI'), ('BstC8I', 'BstC8I'), ('BstDEI', 'BstDEI'), ('BstDSI', 'BstDSI'), ('BstEII', 'BstEII'), ('BstENI', 'BstENI'), ('BstF5I', 'BstF5I'), ('BstFNI', 'BstFNI'), ('BstH2I', 'BstH2I'), ('BstHHI', 'BstHHI'), ('BstKTI', 'BstKTI'), ('BstMAI', 'BstMAI'), ('BstMBI', 'BstMBI'), ('BstMCI', 'BstMCI'), ('BstMWI', 'BstMWI'), ('BstNI', 'BstNI'), ('BstNSI', 'BstNSI'), ('BstPAI', 'BstPAI'), ('BstPI', 'BstPI'), ('BstSCI', 'BstSCI'), ('BstSFI', 'BstSFI'), ('BstSLI', 'BstSLI'), ('BstSNI', 'BstSNI'), ('BstUI', 'BstUI'), ('BstV1I', 'BstV1I'), ('BstV2I', 'BstV2I'), ('BstX2I', 'BstX2I'), ('BstXI', 'BstXI'), ('BstYI', 'BstYI'), ('BstZ17I', 'BstZ17I'), ('BstZI', 'BstZI'), ('Bsu15I', 'Bsu15I'), ('Bsu36I', 'Bsu36I'), ('BsuI', 'BsuI'), ('BsuRI', 'BsuRI'), ('BsuTUI', 'BsuTUI'), ('BtgI', 'BtgI'), ('BtgZI', 'BtgZI'), ('BthCI', 'BthCI'), ('BtrI', 'BtrI'), ('BtsCI', 'BtsCI'), ('BtsI', 'BtsI'), ('BtsIMutI', 'BtsIMutI'), ('BtuMI', 'BtuMI'), ('Bve1B23I', 'Bve1B23I'), ('BveI', 'BveI'), ('Cac8I', 'Cac8I'), ('CaiI', 'CaiI'), ('Cal14237I', 'Cal14237I'), ('CalB3II', 'CalB3II'), ('Cau10061II', 'Cau10061II'), ('CauII', 'CauII'), ('Cba13II', 'Cba13II'), ('Cba16038I', 'Cba16038I'), ('Cbo67071IV', 'Cbo67071IV'), ('Cch467III', 'Cch467III'), ('CchII', 'CchII'), ('CchIII', 'CchIII'), ('CciI', 'CciI'), ('CciNI', 'CciNI'), ('Cco14983V', 'Cco14983V'), ('Cco14983VI', 'Cco14983VI'), ('CcrNAIII', 'CcrNAIII'), ('Cdi11397I', 'Cdi11397I'), ('CdiI', 'CdiI'), ('CdpI', 'CdpI'), ('Cdu23823II', 'Cdu23823II'), ('CfoI', 'CfoI'), ('Cfr10I', 'Cfr10I'), ('Cfr13I', 'Cfr13I'), ('Cfr42I', 'Cfr42I'), ('Cfr9I', 'Cfr9I'), ('CfrI', 'CfrI'), ('CfrMH13II', 'CfrMH13II'), ('CfrMH16VI', 'CfrMH16VI'), ('Cfupf3II', 'Cfupf3II'), ('Cgl13032I', 'Cgl13032I'), ('Cgl13032II', 'Cgl13032II'), ('ChaI', 'ChaI'), ('Cje265V', 'Cje265V'), ('Cje54107III', 'Cje54107III'), ('CjeFIII', 'CjeFIII'), ('CjeFV', 'CjeFV'), ('CjeI', 'CjeI'), ('CjeNII', 'CjeNII'), ('CjeNIII', 'CjeNIII'), ('CjeNV', 'CjeNV'), ('CjeP659IV', 'CjeP659IV'), ('CjePI', 'CjePI'), ('CjuI', 'CjuI'), ('CjuII', 'CjuII'), ('Cla11845III', 'Cla11845III'), ('ClaI', 'ClaI'), ('Cly7489II', 'Cly7489II'), ('Cma23826I', 'Cma23826I'), ('CpoI', 'CpoI'), ('CseI', 'CseI'), ('CsiI', 'CsiI'), ('Csp2014I', 'Csp2014I'), ('Csp6I', 'Csp6I'), ('CspAI', 'CspAI'), ('CspCI', 'CspCI'), ('CspI', 'CspI'), ('CstMI', 'CstMI'), ('CviAII', 'CviAII'), ('CviJI', 'CviJI'), ('CviKI_1', 'CviKI_1'), ('CviQI', 'CviQI'), ('CviRI', 'CviRI'), ('Dde51507I', 'Dde51507I'), ('DdeI', 'DdeI'), ('DinI', 'DinI'), ('DpnI', 'DpnI'), ('DpnII', 'DpnII'), ('DraI', 'DraI'), ('DraII', 'DraII'), ('DraIII', 'DraIII'), ('DraRI', 'DraRI'), ('DrdI', 'DrdI'), ('DrdII', 'DrdII'), ('DrdIV', 'DrdIV'), ('DriI', 'DriI'), ('DsaI', 'DsaI'), ('DseDI', 'DseDI'), ('DvuIII', 'DvuIII'), ('EaeI', 'EaeI'), ('EagI', 'EagI'), ('Eam1104I', 'Eam1104I'), ('Eam1105I', 'Eam1105I'), ('EarI', 'EarI'), ('EciI', 'EciI'), ('Ecl136II', 'Ecl136II'), ('Ecl234I', 'Ecl234I'), ('Ecl35734I', 'Ecl35734I'), ('EclXI', 'EclXI'), ('Eco105I', 'Eco105I'), ('Eco130I', 'Eco130I'), ('Eco147I', 'Eco147I'), ('Eco24I', 'Eco24I'), ('Eco31I', 'Eco31I'), ('Eco32I', 'Eco32I'), ('Eco43896II', 'Eco43896II'), ('Eco4465II', 'Eco4465II'), ('Eco47I', 'Eco47I'), ('Eco47III', 'Eco47III'), ('Eco52I', 'Eco52I'), ('Eco53kI', 'Eco53kI'), ('Eco57I', 'Eco57I'), ('Eco57MI', 'Eco57MI'), ('Eco72I', 'Eco72I'), ('Eco81I', 'Eco81I'), ('Eco88I', 'Eco88I'), ('Eco91I', 'Eco91I'), ('EcoBLMcrX', 'EcoBLMcrX'), ('EcoE1140I', 'EcoE1140I'), ('EcoHI', 'EcoHI'), ('EcoHSI', 'EcoHSI'), ('EcoICRI', 'EcoICRI'), ('EcoMVII', 'EcoMVII'), ('EcoNI', 'EcoNI'), ('EcoNIH6II', 'EcoNIH6II'), ('EcoO109I', 'EcoO109I'), ('EcoO65I', 'EcoO65I'), ('EcoRI', 'EcoRI'), ('EcoRII', 'EcoRII'), ('EcoRV', 'EcoRV'), ('EcoT14I', 'EcoT14I'), ('EcoT22I', 'EcoT22I'), ('EcoT38I', 'EcoT38I'), ('EgeI', 'EgeI'), ('EheI', 'EheI'), ('Eli8509II', 'Eli8509II'), ('ErhI', 'ErhI'), ('EsaBC3I', 'EsaBC3I'), ('EsaSSI', 'EsaSSI'), ('Esp3007I', 'Esp3007I'), ('Esp3I', 'Esp3I'), ('EspI', 'EspI'), ('FaeI', 'FaeI'), ('FaiI', 'FaiI'), ('FalI', 'FalI'), ('FaqI', 'FaqI'), ('FatI', 'FatI'), ('FauI', 'FauI'), ('FauNDI', 'FauNDI'), ('Fba202Z8II', 'Fba202Z8II'), ('FbaI', 'FbaI'), ('FblI', 'FblI'), ('Fco1691IV', 'Fco1691IV'), ('FinI', 'FinI'), ('FmuI', 'FmuI'), ('Fnu4HI', 'Fnu4HI'), ('FnuDII', 'FnuDII'), ('FokI', 'FokI'), ('FriOI', 'FriOI'), ('FseI', 'FseI'), ('Fsp4HI', 'Fsp4HI'), ('FspAI', 'FspAI'), ('FspBI', 'FspBI'), ('FspEI', 'FspEI'), ('FspI', 'FspI'), ('FspPK15I', 'FspPK15I'), ('FtnUV', 'FtnUV'), ('GauT27I', 'GauT27I'), ('Gba708II', 'Gba708II'), ('GdiII', 'GdiII'), ('GlaI', 'GlaI'), ('GluI', 'GluI'), ('GsaI', 'GsaI'), ('GsuI', 'GsuI'), ('HaeI', 'HaeI'), ('HaeII', 'HaeII'), ('HaeIII', 'HaeIII'), ('HapII', 'HapII'), ('HauII', 'HauII'), ('HbaII', 'HbaII'), ('HdeNY26I', 'HdeNY26I'), ('HdeZA17I', 'HdeZA17I'), ('HgaI', 'HgaI'), ('HgiAI', 'HgiAI'), ('HgiCI', 'HgiCI'), ('HgiEII', 'HgiEII'), ('HgiJII', 'HgiJII'), ('HhaI', 'HhaI'), ('Hin1I', 'Hin1I'), ('Hin1II', 'Hin1II'), ('Hin4I', 'Hin4I'), ('Hin4II', 'Hin4II'), ('Hin6I', 'Hin6I'), ('HinP1I', 'HinP1I'), ('HincII', 'HincII'), ('HindII', 'HindII'), ('HindIII', 'HindIII'), ('HinfI', 'HinfI'), ('HpaI', 'HpaI'), ('HpaII', 'HpaII'), ('HphI', 'HphI'), ('Hpy166II', 'Hpy166II'), ('Hpy178III', 'Hpy178III'), ('Hpy188I', 'Hpy188I'), ('Hpy188III', 'Hpy188III'), ('Hpy300XI', 'Hpy300XI'), ('Hpy8I', 'Hpy8I'), ('Hpy99I', 'Hpy99I'), ('Hpy99XIII', 'Hpy99XIII'), ('Hpy99XIV', 'Hpy99XIV'), ('Hpy99XIV_mut1', 'Hpy99XIV_mut1'), ('Hpy99XXII', 'Hpy99XXII'), ('HpyAV', 'HpyAV'), ('HpyAXIV', 'HpyAXIV'), ('HpyAXVIII', 'HpyAXVIII'), ('HpyAXVI_mut1', 'HpyAXVI_mut1'), ('HpyAXVI_mut2', 'HpyAXVI_mut2'), ('HpyCH4III', 'HpyCH4III'), ('HpyCH4IV', 'HpyCH4IV'), ('HpyCH4V', 'HpyCH4V'), ('HpyF10VI', 'HpyF10VI'), ('HpyF3I', 'HpyF3I'), ('HpySE526I', 'HpySE526I'), ('HpyUM032XIII', 'HpyUM032XIII'), ('HpyUM032XIII_mut1', 'HpyUM032XIII_mut1'), ('HpyUM032XIV', 'HpyUM032XIV'), ('HpyUM037X', 'HpyUM037X'), ('Hso63250IV', 'Hso63250IV'), ('Hso63373III', 'Hso63373III'), ('Hsp92I', 'Hsp92I'), ('Hsp92II', 'Hsp92II'), ('HspAI', 'HspAI'), ('HspMHR1II', 'HspMHR1II'), ('Jma19592I', 'Jma19592I'), ('Jma19592II', 'Jma19592II'), ('Jsp2502II', 'Jsp2502II'), ('KasI', 'KasI'), ('KflI', 'KflI'), ('Kor51II', 'Kor51II'), ('Kpn156V', 'Kpn156V'), ('Kpn2I', 'Kpn2I'), ('Kpn327I', 'Kpn327I'), ('KpnI', 'KpnI'), ('KpnNH25III', 'KpnNH25III'), ('KpnNIH30III', 'KpnNIH30III'), ('KpnNIH50I', 'KpnNIH50I'), ('KroI', 'KroI'), ('Ksp22I', 'Ksp22I'), ('Ksp632I', 'Ksp632I'), ('KspAI', 'KspAI'), ('KspI', 'KspI'), ('Kzo9I', 'Kzo9I'), ('Lba2029III', 'Lba2029III'), ('Lbr124II', 'Lbr124II'), ('Lde4408II', 'Lde4408II'), ('LguI', 'LguI'), ('LlaG50I', 'LlaG50I'), ('LmnI', 'LmnI'), ('Lmo370I', 'Lmo370I'), ('Lmo911II', 'Lmo911II'), ('Lpl1004II', 'Lpl1004II'), ('LpnI', 'LpnI'), ('LpnPI', 'LpnPI'), ('Lra68I', 'Lra68I'), ('LsaDS4I', 'LsaDS4I'), ('Lsp1109I', 'Lsp1109I'), ('Lsp48III', 'Lsp48III'), ('Lsp6406VI', 'Lsp6406VI'), ('LweI', 'LweI'), ('MabI', 'MabI'), ('MaeI', 'MaeI'), ('MaeII', 'MaeII'), ('MaeIII', 'MaeIII'), ('MalI', 'MalI'), ('MaqI', 'MaqI'), ('MauBI', 'MauBI'), ('Mba11I', 'Mba11I'), ('MbiI', 'MbiI'), ('MboI', 'MboI'), ('MboII', 'MboII'), ('McaTI', 'McaTI'), ('Mcr10I', 'Mcr10I'), ('McrI', 'McrI'), ('MfeI', 'MfeI'), ('MflI', 'MflI'), ('MhlI', 'MhlI'), ('MjaIV', 'MjaIV'), ('MkaDII', 'MkaDII'), ('MlsI', 'MlsI'), ('Mlu211III', 'Mlu211III'), ('MluCI', 'MluCI'), ('MluI', 'MluI'), ('MluNI', 'MluNI'), ('Mly113I', 'Mly113I'), ('MlyI', 'MlyI'), ('MmeI', 'MmeI'), ('MnlI', 'MnlI'), ('Mox20I', 'Mox20I'), ('Mph1103I', 'Mph1103I'), ('MreI', 'MreI'), ('MroI', 'MroI'), ('MroNI', 'MroNI'), ('MroXI', 'MroXI'), ('MscI', 'MscI'), ('MseI', 'MseI'), ('MslI', 'MslI'), ('Msp20I', 'Msp20I'), ('MspA1I', 'MspA1I'), ('MspCI', 'MspCI'), ('MspGI', 'MspGI'), ('MspI', 'MspI'), ('MspI7II', 'MspI7II'), ('MspI7IV', 'MspI7IV'), ('MspJI', 'MspJI'), ('MspR9I', 'MspR9I'), ('MspSC27II', 'MspSC27II'), ('MssI', 'MssI'), ('MstI', 'MstI'), ('MteI', 'MteI'), ('MtuHN878II', 'MtuHN878II'), ('MunI', 'MunI'), ('Mva1269I', 'Mva1269I'), ('MvaI', 'MvaI'), ('MvnI', 'MvnI'), ('MwoI', 'MwoI'), ('NaeI', 'NaeI'), ('Nal45188II', 'Nal45188II'), ('NarI', 'NarI'), ('Nbr128II', 'Nbr128II'), ('NciI', 'NciI'), ('NcoI', 'NcoI'), ('NdeI', 'NdeI'), ('NdeII', 'NdeII'), ('NgoAVII', 'NgoAVII'), ('NgoAVIII', 'NgoAVIII'), ('NgoMIV', 'NgoMIV'), ('NhaXI', 'NhaXI'), ('NheI', 'NheI'), ('NhoI', 'NhoI'), ('NlaCI', 'NlaCI'), ('NlaIII', 'NlaIII'), ('NlaIV', 'NlaIV'), ('Nli3877I', 'Nli3877I'), ('NmeA6CIII', 'NmeA6CIII'), ('NmeAIII', 'NmeAIII'), ('NmeDI', 'NmeDI'), ('NmuCI', 'NmuCI'), ('NotI', 'NotI'), ('NpeUS61II', 'NpeUS61II'), ('NruI', 'NruI'), ('NsbI', 'NsbI'), ('NsiI', 'NsiI'), ('NspBII', 'NspBII'), ('NspI', 'NspI'), ('NspV', 'NspV'), ('ObaBS10I', 'ObaBS10I'), ('OgrI', 'OgrI'), ('OliI', 'OliI'), ('OspHL35III', 'OspHL35III'), ('PabI', 'PabI'), ('Pac19842II', 'Pac19842II'), ('PacI', 'PacI'), ('PacIII', 'PacIII'), ('PaeI', 'PaeI'), ('PaePA99III', 'PaePA99III'), ('PaeR7I', 'PaeR7I'), ('PagI', 'PagI'), ('Pal408I', 'Pal408I'), ('PalAI', 'PalAI'), ('PasI', 'PasI'), ('PauI', 'PauI'), ('Pba2294I', 'Pba2294I'), ('PcaII', 'PcaII'), ('PceI', 'PceI'), ('PciI', 'PciI'), ('PciSI', 'PciSI'), ('Pcr308II', 'Pcr308II'), ('PcsI', 'PcsI'), ('PctI', 'PctI'), ('Pdi8503III', 'Pdi8503III'), ('PdiI', 'PdiI'), ('PdmI', 'PdmI'), ('Pdu1735I', 'Pdu1735I'), ('PenI', 'PenI'), ('PfeI', 'PfeI'), ('Pfl1108I', 'Pfl1108I'), ('Pfl23II', 'Pfl23II'), ('Pfl8569I', 'Pfl8569I'), ('PflFI', 'PflFI'), ('PflMI', 'PflMI'), ('PflPt14I', 'PflPt14I'), ('PfoI', 'PfoI'), ('PfrJS12IV', 'PfrJS12IV'), ('PfrJS12V', 'PfrJS12V'), ('PfrJS15III', 'PfrJS15III'), ('Pin17FIII', 'Pin17FIII'), ('PinAI', 'PinAI'), ('PinP23II', 'PinP23II'), ('PinP59III', 'PinP59III'), ('PkrI', 'PkrI'), ('PlaDI', 'PlaDI'), ('Ple19I', 'Ple19I'), ('PleI', 'PleI'), ('PliMI', 'PliMI'), ('PluTI', 'PluTI'), ('PmaCI', 'PmaCI'), ('PmeI', 'PmeI'), ('PmlI', 'PmlI'), ('PpiI', 'PpiI'), ('PpiP13II', 'PpiP13II'), ('PpsI', 'PpsI'), ('Ppu10I', 'Ppu10I'), ('Ppu21I', 'Ppu21I'), ('PpuMI', 'PpuMI'), ('PscI', 'PscI'), ('Pse18267I', 'Pse18267I'), ('PshAI', 'PshAI'), ('PshBI', 'PshBI'), ('PsiI', 'PsiI'), ('Psp0357II', 'Psp0357II'), ('Psp03I', 'Psp03I'), ('Psp124BI', 'Psp124BI'), ('Psp1406I', 'Psp1406I'), ('Psp5II', 'Psp5II'), ('Psp6I', 'Psp6I'), ('PspCI', 'PspCI'), ('PspEI', 'PspEI'), ('PspFI', 'PspFI'), ('PspGI', 'PspGI'), ('PspLI', 'PspLI'), ('PspN4I', 'PspN4I'), ('PspOMI', 'PspOMI'), ('PspOMII', 'PspOMII'), ('PspPI', 'PspPI'), ('PspPPI', 'PspPPI'), ('PspPRI', 'PspPRI'), ('PspXI', 'PspXI'), ('PsrI', 'PsrI'), ('PssI', 'PssI'), ('Pst14472I', 'Pst14472I'), ('Pst145I', 'Pst145I'), ('Pst273I', 'Pst273I'), ('PstI', 'PstI'), ('PstNI', 'PstNI'), ('PsuGI', 'PsuGI'), ('PsuI', 'PsuI'), ('PsyI', 'PsyI'), ('PteI', 'PteI'), ('PvuI', 'PvuI'), ('PvuII', 'PvuII'), ('Rba2021I', 'Rba2021I'), ('RceI', 'RceI'), ('RdeGBI', 'RdeGBI'), ('RdeGBII', 'RdeGBII'), ('RdeGBIII', 'RdeGBIII'), ('RflFIII', 'RflFIII'), ('RgaI', 'RgaI'), ('RigI', 'RigI'), ('RlaI', 'RlaI'), ('RlaII', 'RlaII'), ('RleAI', 'RleAI'), ('Rmu369III', 'Rmu369III'), ('RpaB5I', 'RpaB5I'), ('RpaBI', 'RpaBI'), ('RpaI', 'RpaI'), ('RpaTI', 'RpaTI'), ('RruI', 'RruI'), ('RsaI', 'RsaI'), ('RsaNI', 'RsaNI'), ('RseI', 'RseI'), ('Rsp008IV', 'Rsp008IV'), ('Rsp008V', 'Rsp008V'), ('Rsp531II', 'Rsp531II'), ('RspPBTS2III', 'RspPBTS2III'), ('Rsr2I', 'Rsr2I'), ('RsrII', 'RsrII'), ('Rtr1953I', 'Rtr1953I'), ('SacI', 'SacI'), ('SacII', 'SacII'), ('Saf8902III', 'Saf8902III'), ('Sag901I', 'Sag901I'), ('SalI', 'SalI'), ('SanDI', 'SanDI'), ('SapI', 'SapI'), ('SaqAI', 'SaqAI'), ('SatI', 'SatI'), ('Sau3AI', 'Sau3AI'), ('Sau64037IV', 'Sau64037IV'), ('Sau96I', 'Sau96I'), ('SauI', 'SauI'), ('Sba460II', 'Sba460II'), ('SbfI', 'SbfI'), ('Sbo46I', 'Sbo46I'), ('ScaI', 'ScaI'), ('SchI', 'SchI'), ('SciI', 'SciI'), ('ScoDS2II', 'ScoDS2II'), ('ScrFI', 'ScrFI'), ('SdaI', 'SdaI'), ('SdeAI', 'SdeAI'), ('SdeOSI', 'SdeOSI'), ('SduI', 'SduI'), ('SecI', 'SecI'), ('SelI', 'SelI'), ('Sen17963III', 'Sen17963III'), ('SenA1673III', 'SenA1673III'), ('SenSARA26III', 'SenSARA26III'), ('SenTFIV', 'SenTFIV'), ('SetI', 'SetI'), ('SexAI', 'SexAI'), ('SfaAI', 'SfaAI'), ('SfaNI', 'SfaNI'), ('SfcI', 'SfcI'), ('SfeI', 'SfeI'), ('SfiI', 'SfiI'), ('SfoI', 'SfoI'), ('Sfr274I', 'Sfr274I'), ('Sfr303I', 'Sfr303I'), ('SfuI', 'SfuI'), ('SgeI', 'SgeI'), ('SgfI', 'SgfI'), ('SgrAI', 'SgrAI'), ('SgrAII', 'SgrAII'), ('SgrBI', 'SgrBI'), ('SgrDI', 'SgrDI'), ('SgrTI', 'SgrTI'), ('SgsI', 'SgsI'), ('SimI', 'SimI'), ('SinI', 'SinI'), ('SlaI', 'SlaI'), ('SmaI', 'SmaI'), ('SmaUMH5I', 'SmaUMH5I'), ('SmaUMH8I', 'SmaUMH8I'), ('SmiI', 'SmiI'), ('SmiMI', 'SmiMI'), ('SmlI', 'SmlI'), ('SmoI', 'SmoI'), ('Sna507VIII', 'Sna507VIII'), ('SnaBI', 'SnaBI'), ('SnaI', 'SnaI'), ('Sno506I', 'Sno506I'), ('Spe19205IV', 'Spe19205IV'), ('SpeI', 'SpeI'), ('SphI', 'SphI'), ('SplI', 'SplI'), ('SpnRII', 'SpnRII'), ('SpoDI', 'SpoDI'), ('SrfI', 'SrfI'), ('Sse232I', 'Sse232I'), ('Sse8387I', 'Sse8387I'), ('Sse8647I', 'Sse8647I'), ('Sse9I', 'Sse9I'), ('SseBI', 'SseBI'), ('SsiI', 'SsiI'), ('Ssp6803IV', 'Ssp6803IV'), ('Ssp714II', 'Ssp714II'), ('SspD5I', 'SspD5I'), ('SspDI', 'SspDI'), ('SspI', 'SspI'), ('SspJOR1II', 'SspJOR1II'), ('SspMI', 'SspMI'), ('SstE37I', 'SstE37I'), ('SstI', 'SstI'), ('Sth132I', 'Sth132I'), ('Sth20745III', 'Sth20745III'), ('Sth302II', 'Sth302II'), ('SthSt3II', 'SthSt3II'), ('StsI', 'StsI'), ('StuI', 'StuI'), ('StyD4I', 'StyD4I'), ('StyI', 'StyI'), ('SurP32aII', 'SurP32aII'), ('SwaI', 'SwaI'), ('TaaI', 'TaaI'), ('TaiI', 'TaiI'), ('TaqI', 'TaqI'), ('TaqII', 'TaqII'), ('TaqIII', 'TaqIII'), ('TasI', 'TasI'), ('TatI', 'TatI'), ('TauI', 'TauI'), ('TfiI', 'TfiI'), ('TpyTP2I', 'TpyTP2I'), ('Tru1I', 'Tru1I'), ('Tru9I', 'Tru9I'), ('TscAI', 'TscAI'), ('TseFI', 'TseFI'), ('TseI', 'TseI'), ('TsoI', 'TsoI'), ('Tsp45I', 'Tsp45I'), ('Tsp4CI', 'Tsp4CI'), ('TspARh3I', 'TspARh3I'), ('TspDTI', 'TspDTI'), ('TspEI', 'TspEI'), ('TspGWI', 'TspGWI'), ('TspMI', 'TspMI'), ('TspRI', 'TspRI'), ('TssI', 'TssI'), ('TstI', 'TstI'), ('TsuI', 'TsuI'), ('Tth111I', 'Tth111I'), ('Tth111II', 'Tth111II'), ('UbaF11I', 'UbaF11I'), ('UbaF12I', 'UbaF12I'), ('UbaF13I', 'UbaF13I'), ('UbaF14I', 'UbaF14I'), ('UbaF9I', 'UbaF9I'), ('UbaPI', 'UbaPI'), ('UcoMSI', 'UcoMSI'), ('UnbI', 'UnbI'), ('Van9116I', 'Van9116I'), ('Van91I', 'Van91I'), ('VchE4II', 'VchE4II'), ('Vdi96II', 'Vdi96II'), ('Vha464I', 'Vha464I'), ('VneI', 'VneI'), ('VpaK11AI', 'VpaK11AI'), ('VpaK11BI', 'VpaK11BI'), ('VspI', 'VspI'), ('Vtu19109I', 'Vtu19109I'), ('WviI', 'WviI'), ('XagI', 'XagI'), ('XapI', 'XapI'), ('XbaI', 'XbaI'), ('Xca85IV', 'Xca85IV'), ('XceI', 'XceI'), ('XcmI', 'XcmI'), ('XhoI', 'XhoI'), ('XhoII', 'XhoII'), ('XmaI', 'XmaI'), ('XmaIII', 'XmaIII'), ('XmaJI', 'XmaJI'), ('XmiI', 'XmiI'), ('XmnI', 'XmnI'), ('XspI', 'XspI'), ('YkrI', 'YkrI'), ('ZraI', 'ZraI'), ('ZrmI', 'ZrmI'), ('Zsp2I', 'Zsp2I')], max_length=20)),
                ('activity_buffer_1_1', models.IntegerField(blank=True, null=True)),
                ('activity_buffer_2_1', models.IntegerField(blank=True, null=True)),
                ('activity_buffer_3_1', models.IntegerField(blank=True, null=True)),
                ('activity_buffer_CS', models.IntegerField(blank=True, null=True)),
                ('activity_buffer_aari', models.IntegerField(blank=True, null=True)),
                ('hf_version', models.BooleanField(blank=True)),
                ('link_datasheet', models.CharField(blank=True, max_length=200)),
                ('description', models.CharField(blank=True, max_length=200)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Stats',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('plasmid_count', models.CharField(blank=True, max_length=200)),
                ('plasmids_by_month', models.JSONField(null=True)),
                ('plasmids_with_sequence', models.JSONField(null=True)),
                ('plasmids_with_gs', models.JSONField(null=True)),
                ('plasmids_by_type', models.JSONField(null=True)),
                ('plasmids_by_level', models.JSONField(null=True)),
                ('gs_box_fill', models.JSONField(null=True)),
                ('last_update', models.DateField(default=datetime.date.today)),
            ],
        ),
        migrations.CreateModel(
            name='TableFilter',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=20)),
                ('color', models.CharField(blank=True, choices=[('primary', 'Blue'), ('secondary', 'Gray'), ('success', 'Green'), ('info', 'Cyan'), ('warning', 'Yellow'), ('danger', 'Red'), ('light', 'White'), ('dark', 'Black')], max_length=10, null=True)),
                ('options', models.CharField(blank=True, help_text="Format: 'x|X,y|Y'. Left side is the name of the filter and right side is the start-with text", max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='Strain',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=200)),
                ('description', models.CharField(blank=True, max_length=1000)),
                ('resistances', models.ManyToManyField(blank=True, help_text='Use CTRL for multiple select', related_name='+', to='inventory.resistance')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Plasmid',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('sequence', models.FileField(blank=True, upload_to='uploads/plasmids/')),
                ('computed_size', models.IntegerField(blank=True, editable=False, null=True)),
                ('insert_computed_size', models.IntegerField(blank=True, editable=False, null=True)),
                ('intended_use', models.CharField(max_length=200)),
                ('level', models.IntegerField(blank=True, null=True)),
                ('description', models.CharField(blank=True, max_length=1000)),
                ('created_on', models.DateField(default=datetime.date.today)),
                ('qr_id', shortuuidfield.fields.ShortUUIDField(blank=True, default='9uEoCrzbBVUu7iVqo7B8h7', editable=False, max_length=22)),
                ('working_colony', models.IntegerField(blank=True, null=True)),
                ('check_state', models.IntegerField(blank=True, choices=[(0, 'Not required'), (1, 'Pending'), (2, 'Correct')], default=1)),
                ('check_method', models.IntegerField(blank=True, choices=[(0, 'Digestion'), (1, 'Colony PCR')], default=0, null=True)),
                ('check_date', models.DateField(blank=True, null=True)),
                ('digestion_check_enzymes', models.CharField(blank=True, max_length=100, null=True)),
                ('check_observations', models.CharField(blank=True, max_length=1000, null=True)),
                ('sequencing_state', models.IntegerField(blank=True, choices=[(0, 'Not required'), (1, 'Required'), (2, 'Correct')], default=0)),
                ('sequencing_date', models.DateField(blank=True, null=True)),
                ('sequencing_ab1_file_1', models.FileField(blank=True, null=True, upload_to='uploads/sequencing/')),
                ('sequencing_ab1_file_2', models.FileField(blank=True, null=True, upload_to='uploads/sequencing/')),
                ('sequencing_observations', models.CharField(blank=True, max_length=1000, null=True)),
                ('author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='inventory.plasmidauthor')),
                ('backbone', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='inventory.plasmid')),
                ('inserts', models.ManyToManyField(blank=True, related_name='+', to='inventory.plasmid')),
                ('resistances', models.ManyToManyField(blank=True, help_text='Use CTRL for multiple select', related_name='+', to='inventory.resistance')),
                ('type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='inventory.plasmidtype')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=128)),
                ('address', models.CharField(max_length=128)),
                ('administrator_name', models.CharField(max_length=128)),
                ('administrator_email', models.CharField(max_length=128)),
                ('members', models.ManyToManyField(to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='GlycerolStock',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_on', models.DateField(default=datetime.date.today)),
                ('box_row', models.CharField(blank=True, choices=[('A', 'A'), ('B', 'B'), ('C', 'C'), ('D', 'D'), ('E', 'E'), ('F', 'F'), ('G', 'G'), ('H', 'H'), ('I', 'I')], max_length=1, null=True)),
                ('box_column', models.IntegerField(blank=True, choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (6, '6'), (7, '7'), (8, '8'), (9, '9')], null=True)),
                ('qr_id', shortuuidfield.fields.ShortUUIDField(blank=True, default='YiAHr8iiZGk6L7m4AzSzb5', editable=False, max_length=22)),
                ('details', models.CharField(blank=True, max_length=1000)),
                ('box', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, to='inventory.box')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='inventory.glycerolstock')),
                ('plasmid', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='inventory.plasmid')),
                ('strain', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, to='inventory.strain')),
            ],
            options={
                'ordering': ['strain', 'plasmid'],
            },
        ),
        migrations.AddField(
            model_name='box',
            name='location',
            field=models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, to='inventory.location'),
        ),
    ]
