# Generated by Django 4.0.4 on 2022-05-24 18:20

import datetime
from django.db import migrations, models
import django.db.models.deletion
import multiselectfield.db.fields
import shortuuidfield.fields
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Box',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=200)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=200)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='PlasmidTypes',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='Primer',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=100)),
                ('sequence_3', models.CharField(blank=True, help_text="5' → 3' direction", max_length=200, verbose_name="Sequence (3' end)")),
                ('sequence_5', models.CharField(blank=True, help_text="5' → 3' direction", max_length=200, verbose_name="Sequence (5' end / overhang)")),
                ('fwd_or_rev', models.CharField(blank=True, choices=[('f', 'FWD'), ('r', 'REV')], max_length=1)),
                ('intended_use', models.CharField(blank=True, max_length=1000)),
                ('qr_id', shortuuidfield.fields.ShortUUIDField(blank=True, default='UM4i8biX9dyrvVih6Bc2E4', editable=False, max_length=22)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='RestrictionEnzyme',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('brand', models.IntegerField(choices=[(0, 'Thermo'), (1, 'NEB')])),
                ('recognition_site', models.CharField(max_length=10)),
                ('fcut', models.IntegerField(blank=True, help_text='0 = left of first base. 1 = right of first base. 2 = right of second base. And so on', null=True)),
                ('rcut', models.IntegerField(blank=True, help_text='0 = left of first base. 1 = right of first base. 2 = right of second base. And so on', null=True)),
                ('activity_buffer_1_1', models.IntegerField(blank=True, null=True)),
                ('activity_buffer_2_1', models.IntegerField(blank=True, null=True)),
                ('activity_buffer_3_1', models.IntegerField(blank=True, null=True)),
                ('activity_buffer_CS', models.IntegerField(blank=True, null=True)),
                ('activity_buffer_aari', models.IntegerField(blank=True, null=True)),
                ('recommended_incubation_time', models.IntegerField(help_text='In hours')),
                ('max_activity_temperature', models.IntegerField(blank=True)),
                ('inactivation_temperature', models.IntegerField(blank=True, null=True)),
                ('inactivation_time', models.IntegerField(blank=True, help_text='In minutes', null=True)),
                ('dam_methylation', models.CharField(blank=True, max_length=50)),
                ('dcm_methylation', models.CharField(blank=True, max_length=50)),
                ('cpg_methylation', models.CharField(blank=True, max_length=50)),
                ('hf_version', models.BooleanField(blank=True)),
                ('link_datasheet', models.CharField(blank=True, max_length=200)),
                ('description', models.CharField(blank=True, max_length=200)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Stats',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('plasmid_count', models.CharField(blank=True, max_length=200)),
                ('plasmids_by_month', models.JSONField(null=True)),
                ('plasmids_with_sequence', models.JSONField(null=True)),
                ('plasmids_with_gs', models.JSONField(null=True)),
                ('plasmids_by_type', models.JSONField(null=True)),
                ('plasmids_by_level', models.JSONField(null=True)),
                ('plasmids_by_l0_part_type', models.JSONField(null=True)),
                ('gs_box_fill', models.JSONField(null=True)),
                ('last_update', models.DateField(default=datetime.date.today)),
            ],
        ),
        migrations.CreateModel(
            name='Strain',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=200)),
                ('resistances', multiselectfield.db.fields.MultiSelectField(blank=True, choices=[('AMP', 'Ampicillin'), ('CHL', 'Chloramphenicol'), ('KAN', 'Kanamycin'), ('NAL', 'Nalidixic Acid'), ('SPE', 'Spectinomycin'), ('STR', 'Streptomycin'), ('TET', 'Tetracyclin'), ('GEN', 'Gentamycin'), ('CAR', 'Carbenicillin'), ('RIF', 'Rifampicin')], max_length=39)),
                ('description', models.CharField(blank=True, max_length=1000)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Plasmid',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('resistances', multiselectfield.db.fields.MultiSelectField(blank=True, choices=[('AMP', 'Ampicillin'), ('CHL', 'Chloramphenicol'), ('KAN', 'Kanamycin'), ('NAL', 'Nalidixic Acid'), ('SPE', 'Spectinomycin'), ('STR', 'Streptomycin'), ('TET', 'Tetracyclin'), ('GEN', 'Gentamycin'), ('CAR', 'Carbenicillin'), ('RIF', 'Rifampicin')], max_length=39)),
                ('resistances_plant', multiselectfield.db.fields.MultiSelectField(blank=True, choices=[('HYG', 'Hygromycin'), ('KAN', 'Kanamycin')], max_length=7)),
                ('sequence', models.FileField(blank=True, upload_to='uploads/plasmids/')),
                ('computed_size', models.IntegerField(blank=True, editable=False, null=True)),
                ('insert_computed_size', models.IntegerField(blank=True, editable=False, null=True)),
                ('cloning_method', models.IntegerField(blank=True, choices=[(0, 'Golden Gate'), (1, 'Gibson Assembly'), (2, 'AT cloning')], null=True)),
                ('intended_use', models.CharField(max_length=200)),
                ('level', models.IntegerField(blank=True, choices=[(-1, 'Level -1'), (0, 'Level 0'), (1, 'Level 1'), (2, 'Level 2'), (3, 'Level 3')], null=True)),
                ('expression_or_cloning', models.IntegerField(blank=True, choices=[(0, 'Expression'), (1, 'Cloning')], null=True)),
                ('author', models.IntegerField(choices=[(0, 'Diego Lagos'), (1, 'Bernardo Pollak'), (2, 'Karina Olivos'), (3, 'Javiera Soto-Aguilar')])),
                ('description', models.CharField(blank=True, max_length=1000)),
                ('created_on', models.DateField(default=datetime.date.today)),
                ('qr_id', shortuuidfield.fields.ShortUUIDField(blank=True, default='7EzRssVCxhwHZgDGeEeDUP', editable=False, max_length=22)),
                ('working_colony', models.IntegerField(blank=True, null=True)),
                ('check_state', models.IntegerField(blank=True, choices=[(0, 'Not required'), (1, 'Pending'), (2, 'Correct')], default=1)),
                ('check_method', models.IntegerField(blank=True, choices=[(0, 'Digestion'), (1, 'Colony PCR')], default=0, null=True)),
                ('check_date', models.DateField(blank=True, null=True)),
                ('digestion_check_enzymes', models.CharField(blank=True, max_length=100, null=True)),
                ('check_observations', models.CharField(blank=True, max_length=1000, null=True)),
                ('sequencing_state', models.IntegerField(blank=True, choices=[(0, 'Not required'), (1, 'Required'), (2, 'Correct')], default=0)),
                ('sequencing_date', models.DateField(blank=True, null=True)),
                ('sequencing_ab1_file_1', models.FileField(blank=True, null=True, upload_to='uploads/sequencing/')),
                ('sequencing_ab1_file_2', models.FileField(blank=True, null=True, upload_to='uploads/sequencing/')),
                ('sequencing_observations', models.CharField(blank=True, max_length=1000, null=True)),
                ('backbone', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='inventory.plasmid')),
                ('inserts', models.ManyToManyField(blank=True, related_name='+', to='inventory.plasmid')),
                ('type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='inventory.plasmidtypes')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='GlicerolStock',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_on', models.DateField(default=datetime.date.today)),
                ('box_row', models.CharField(blank=True, choices=[('A', 'A'), ('B', 'B'), ('C', 'C'), ('D', 'D'), ('E', 'E'), ('F', 'F'), ('G', 'G'), ('H', 'H'), ('I', 'I')], max_length=1, null=True)),
                ('box_column', models.IntegerField(blank=True, choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (6, '6'), (7, '7'), (8, '8'), (9, '9')], null=True)),
                ('qr_id', shortuuidfield.fields.ShortUUIDField(blank=True, default='nbwEMVXwQ4NURDhQbVwmrg', editable=False, max_length=22)),
                ('details', models.CharField(blank=True, max_length=1000)),
                ('box', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, to='inventory.box')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='inventory.glicerolstock')),
                ('plasmid', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='inventory.plasmid')),
                ('strain', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, to='inventory.strain')),
            ],
            options={
                'ordering': ['strain', 'plasmid'],
            },
        ),
        migrations.AddField(
            model_name='box',
            name='location',
            field=models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, to='inventory.location'),
        ),
    ]
